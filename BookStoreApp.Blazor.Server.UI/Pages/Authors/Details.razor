@page "/authors/details/{id:int}"
@inject IAuthorService authorService
@inject NavigationManager navManager

<h3>Author Details</h3>
<EditForm Model="Author">
    <fieldset disabled="true">
        <div class="form-group">
            <label for="firstname">First Name</label>
            <InputText @bind-Value="Author.FirstName" class="form-control" id="firstname" />
            <ValidationMessage For="@(() => Author.FirstName)" />
        </div>
        <br />
        <div class="form-group">
            <label for="lastname">Last Name</label>
            <InputText @bind-Value="Author.LastName" class="form-control" id="lastname" />
            <ValidationMessage For="@(() => Author.LastName)" />
        </div>
        <br />
        <div class="form-group">
            <label for="bio">Biography</label>
            <InputText @bind-Value="Author.Bio" class="form-control" id="bio" />
            <ValidationMessage For="@(() => Author.Bio)" />
        </div>
        <br />
    </fieldset>
    @if (Author.Books == null || Author.Books.Any() == false)
    {
        <div class="alert alert-dismissible alert-secondary">
            No Books for this Author.
        </div>
    }
    else
    {
        foreach (var book in Author.Books)
        {
            <div class="card" style="width: 18rem;">
                <img src="@book.Image" class="card-img-top" alt="@book.Title">
                <div class="card-body">
                    <h5 class="card-title">@book.Title - @book.Price.ToString("C")</h5>
                    <p class="card-text"></p>
                    <a href="#" class="btn btn-primary">View Book</a>
                </div>
            </div>
        }
    }

    <button @onclick="GoToEditAuthor" class="btn btn-outline-secondary">
        Edit Author
    </button>
    
    <button @onclick="BackToList" class="btn btn-outline-secondary">
        <span class="oi oi-media-skip-backward"></span>
        Back To List
    </button>
</EditForm>

@code{

    [Parameter]
    public int Id { get; set; }
    private AuthorDetailsDto Author = new();

    protected override async Task OnInitializedAsync()
    {
        var response = await authorService.Get(Id);
        if (response.Success)
        {
            Author = response.Data;
        }
    }

    private void BackToList()
    {
        navManager.NavigateTo("/authors/");
    }

    private void GoToEditAuthor()
    {
        navManager.NavigateTo($"/authors/update/{Author.Id}");
    }
}